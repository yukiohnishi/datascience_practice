% Data Science部git勉強会

Goal
====

gitの仕組みを理解する。
gitとgithubの関係を理解する。
開発時に必要な最低限のgitコマンドを習得する。

Description
===========

[初学者オススメのページです]

[初学者オススメのページです]: https://www.atlassian.com/ja/git/tutorial/git-basics

Using `github`
--------------

githubにローカルアクセスするために、ssh鍵の公開鍵をgithubに登録しておきます。

    ls ~/.ssh　(id_rsa.pubがあるかどうか確認してください。)
    (ない場合)　ssh-keygen -t rsa -C “メールアドレス"
    pbcopy < ~/.ssh/id_rsa.pub

これで、公開鍵が作成、クリップボードにコピーされたので、githubに登録します。(一緒にやります。)

git clone
---------

すでに練習用のリポジトリを作成してあります。
練習用のディレクトリを作成し、その下で以下のコマンドを実行。

    git clone https://github.com/yukiohnishi/datascience_practice.git

git config
----------

gitを使う上での共通設定を行います。(ユーザ名、メールアドレス)

    git config --global user.name "名前"
    git config --global user.email "メールアドレス"

--globalをつけることで、このPCで扱うgitに関しては、すべてこの設定が反映されます。
業務ではあんまりないと思いますが、gitごとに異なる設定を行うことも可能ですので、興味があれば調べてください。

git branch
----------

gitでは作業をbranchという作業単位で行うことが主流です。
以下コマンドでローカルに作成されているブランチを確認することができます。

git checkout
------------

git checkoutは色々なケースで使うことができるコマンドです。
今回はブランチの切り替え、ブランチの新規作成を行うコマンドについて紹介します。

    git checkout '既存のブランチ名'
    git checkout -b '新規ブランチ名'

何か作業を行う際は、masterブランチから新しいブランチを切って、作業を行ってください。

git status
----------

gitのコミット状況や、編集されたファイルの一覧などを表示します。

git add, commit
---------------

とりあえずワンセットで覚えてください。
commitした変更はgitの履歴として残ります。

    git add .
    git commit -m 'コメント(変更内容が簡潔に記されていること)'

git commit --amend
------------------

間違えてcommitしてしまった変更を修正するコマンドです。コミットコメントの編集なんかによく使われます。

git reset
---------

直前のコミットを取り消します。
どこのコミットを打ち消すかも指定可能です。以下のrevertも。

git revert
----------

直前のコミットに上書きで一つ前のコミットを乗せます。

git push
--------

ローカルのコミット履歴をリモートブランチに反映させます。
git add, commit, pushが一連の流れになります。


git fetch
---------

ローカルブランチが遅れている分、リモートブランチからコミット履歴をローカルにダウンロードします。
ローカルのファイルには変更は反映されません。

git pull
--------

リモートブランチからコミット履歴をローカルにダウンロードし、ローカルのファイルに変更を反映させます。
新たにブランチを切る時は必ず、リモートから最新のものをpullしてきてからブランチを切り、作業を開始してください。

git merge
---------

ブランチAで行われた変更をブランチBに反映させます。

    git merge 'branchA' 'branchB'
